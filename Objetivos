Engenharia Elétrica
Programação Orientada Objetos – Programação Aplicada de Computadores
Trabalho 1
Informações Gerais
• Data de Entrega: 20/11/2022 (23:59)
• Método de Entrega: O link do repositório do github contendo os códigos dos trabalhos e
do vídeo no youtube com a demonstração do jogo devem ser enviados até a data limite para
o e-mail filipe.mutz@ufes.br . O título do e-mail deve ser “EE – PAC – TRAB 1 – [nomes
completos dos integrantes]” e o corpo do e-mail deve conter os nomes e números de
matrículas dos alunos, e os links do repositório e do vídeo.
• Os trabalhos deverão ser feitos em duplas ou trios.
• Entregas além da data limite ou entregues me formato diferente do especificado acima
não serão corrigidos.
• Trabalhos que resultarem em erro de execução receberão nota zero. Se um trecho de
código não estiver funcionando até a data de entrega, comente o trecho ou remova. Só
receberão pontuação as funcionalidades que estiverem funcionando.
Descrição
O trabalho consiste em desenvolver um jogo de 2 jogadores no formato de combate em arena
(e.g., bomberman, dota, etc.) utilizando a linguagem Python, a biblioteca pygame e
programação orientada a objetos.
O grupo deverá escolher um tema para servir de história de background do jogo como
momentos históricos, assuntos estudados ao longo da vida, objetivos do desenvolvimento
sustentável da ONU, etc. Tópicos polêmicos como religião, política ou esportes, ou ofensivos
(conteúdo sexual, racista, com violência de gênero, etc.) levarão à anulação do trabalho.
O jogo deve obedecer a lista de requisitos mínimos abaixo:
• O jogador 1 deve controlar o personagem usando as teclas AWSD e ao redor. O jogador 2
deve controlar seu personagem usando as teclas JIKL e ao redor.
• Devem existir pelo menos 4 personagens jogáveis diferentes, cada um com vantagens e
desvantagens(um pode ser mais rápido e mais fraco, outro pode ser lento e mais resistente,
outro pode possuir mais magias e menos pontos de vida, etc.). Cada personagem deve
possuir uma imagem. Existem bases de dados e sites geradores de imagens grátis para
personagens [1, 2, 3].
• Deve ser criada uma tela de apresentação além da tela principal do jogo. Na tela de
apresentação, deve ser escrita a história de background básica do jogo e nela os jogadores
podem escolher os personagens que usarão na partida. O mesmo personagem pode ser
escolhido pelos 2 jogadores.
• Cada partida deverá ter um tempo máximo, mas poderá ser encerrada antes dependendo
da vida dos jogadores e dos objetivos do jogo.
• Devem ser criados pelo menos ataques dos tipos:
o Físico: É de curta distância e gera o efeito de projetar o alvo à uma certa distância e
o paralisar por um dado tempo.
o Projéteis: são lançados e causam dano se atingirem o alvo.
o De área: afeta a área ao redor de um ponto por um determinado período. Exemplos
(não é necessário criar todos; são apenas exemplos para inspiração):
▪ Gelo: ao entrar na área, o personagem fica congelado por um tempo.
▪ Veneno: ao entrar na área, o personagem é envenenado e passa a perder
pontos de vida por um tempo.
▪ Cura: personagens ganham pontos de vida enquanto estiverem na área.
▪ Bomba: ao explodir, a bomba causa dano a todos os personagens em um
raio.
o Individuais: O usuário escolhe com o mouse o personagem que será afetado pela
magia. Para permitir que ambos os jogadores usem este tipo de magia, ao ser
utilizada o jogo deve pausar até que o jogador clique no personagem a ser afetado.
o De auto-ação: afetam o próprio personagem que lançou a magia. Exemplos (não é
necessário criar todos; são apenas exemplos para inspiração):
▪ Cura: recupera parte da vida do personagem.
▪ Barreira: previne que personagem receba dano.
▪ Aceleração: faz com que o personagem fique mais rápido.
▪ Frenesi: aumenta o dano dos golpes físicos, mas reduz a defesa ou faz com
que o personagem fique paralisado por algum tempo.
• Todos os ataques devem ser visíveis de alguma forma na tela do jogo, mesmo que seja
usando formas simples como círculos e retângulos.
• Devem ser criados minions que nascem de tempos em tempos, se movem em linha reta em
direção aos personagens e os atacam. Obstáculos podem impedir os minions de se
moverem.
• O mapa deve ser construído usando tilemaps [4, 5, 6, 7, 8] e deve conter pelo menos 4 tipos
diferentes de terrenos, sendo o primeiro para representar áreas livres, o segundo para
representar obstáculos que podem ser destruídos pelos personagens, o terceiro para
obstáculos indestrutíveis e o quarto para áreas que afetam os personagens, por exemplo
(não é necessário criar todos; são apenas exemplos para inspiração):
o Gelo: ao entrar na área os personagens deslizam na mesma direção até o fim do
gelo.
o Areia Movediça: ao entrar na região, a velocidade do personagem diminui.
Requisitos de Desenvolvimento:
• Boas práticas de programação orientada a objetos devem ser usadas no projeto. Os objetos
do jogo devem ser representados por classes e objetos. Classes devem ser organizadas em
módulos (arquivos .py). O script que contém o programa principal deve se chamar main.py
e ele deve importar a classe do jogo e executá-la.
• Devem ser usados type hints em todas as funções e métodos para indicar os tipos das
entradas e saídas.
• Trechos de código possivelmente confusos devem ser comentados.
• Devem ser usados nomes de variáveis e funções que tornem o código mais compreensível.
• O Github deve ser usado pelos integrantes do grupo para armazenamento e controle de
versão do código-fonte durante o desenvolvimento do trabalho. O histórico de commits será
utilizado pelo professor para avaliar as contribuições de cada participante do grupo. O
repositório deve possuir um arquivo README contendo pelo menos um parágrafo
descrevendo o projeto e instruções de como instalar os pacotes necessários e rodar o
programa. Deve ser adicionado ainda um link para o vídeo (veja um exemplo ao final de [9]).
• Deve ser gravado um vídeo mostrando a tela inicial e uma partida do jogo. O vídeo deve ser
enviado para o Youtube ou armazenado no repositório do Github e o link deve ser enviado
junto com o código na entrega do trabalho. Mesmo se o trabalho estiver parcialmente
pronto, grave um vídeo do que estiver funcionando.
Pontos Extras
Para demonstrar que o grupo entendeu de fato os algoritmos desenvolvidos para os pontos
extras, estes deverão ser explicados para o professor em uma entrevista.
• A compreensão e implementação do algoritmo A* para permitir que minions desviem de
obstáculos poderá levar à um acréscimo de 30% na nota do trabalho.
• O desenvolvimento de uma inteligência artificial não trivial para os NPCs poderá levar à um
acréscimo de até 20% na nota do trabalho. A IA deverá ter pelo menos funções para:
o Evitar ataques.
o Se mover pelo mapa para tentar chegar ao personagem.
o Atacar o personagem utilizando pelo menos 2 estratégias diferentes (e.g., utilizar
projéteis à distância e ataques físicos quando próximo).
o Combinar ações, e.g., congelar o personagem para fugir ou para realizar uma
sequência de ataques físicos.
o Escolher ações com base em condições próprias, do terreno ou do personagem, e.g.,
se a vida do personagem está abaixo de um valor, use um ataque forte mesmo que
seja arriscado; se sua vida estiver baixa, fuja e procure uma forma de se recuperar,
etc.
Referências
[1] https://sanderfrenken.github.io/Universal-LPC-Spritesheet-CharacterGenerator/#?body=Body_color_light&head=Human_male_light
[2] https://www.youtube.com/watch?v=C0lFshu6z3s
[3] https://www.youtube.com/watch?v=go61GH5k56U
[4] https://www.youtube.com/watch?v=37phHwLtaFg
[5] https://www.youtube.com/watch?v=E5ef6didf5I
[6] https://www.youtube.com/watch?v=QnyyAVL80mk
[7] https://www.youtube.com/watch?v=xYhniILN6Ls
[8] https://www.youtube.com/watch?v=s3aYw54R5KY
[9] https://github.com/alelievr/Mixture/blob/0.4.0/README.md
